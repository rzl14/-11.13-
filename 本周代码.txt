class StockSpanner {
public:
    StockSpanner() {
        
    }
    int stk[10002], idx = -1, nums[10002];
    int next(int price) {
        int ans = 1;
        while (idx >= 0 && stk[idx] <= price)
            ans += nums[idx --];
        stk[++ idx] = price;
        return nums[idx] = ans;
    }
};



class Solution {
public:
    int maxDiff(int num) {
        auto replace = [](string& s, char x, char y) {
            for (char& digit: s) {
                if (digit == x) {
                    digit = y;
                }
            }
        };

        string min_num = to_string(num);
        string max_num = to_string(num);

        // 找到一个高位替换成 9
        for (char digit: max_num) {
            if (digit != '9') {
                replace(max_num, digit, '9');
                break;
            }
        }

        // 将最高位替换成 1
        // 或者找到一个与最高位不相等的高位替换成 0
        for (int i = 0; i < min_num.size(); ++i) {
            char digit = min_num[i];
            if (i == 0) {
                if (digit != '1') {
                    replace(min_num, digit, '1');
                    break;
                }
            }
            else {
                if (digit != '0' && digit != min_num[0]) {
                    replace(min_num, digit, '0');
                    break;
                }
            }
        }

        return stoi(max_num) - stoi(min_num);
    }
};



class Solution {
public:
    vector<int> sequentialDigits(int low, int high) {
        vector<int> ans;
        for (int i = 1; i <= 9; ++i) {
            int num = i;
            for (int j = i + 1; j <= 9; ++j) {
                num = num * 10 + j;
                if (num >= low && num <= high) {
                    ans.push_back(num);
                }
            }
        }
        sort(ans.begin(), ans.end());
        return ans;
    }
};



/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int findBottomLeftValue(TreeNode* root) {
        TreeNode* q[10010];
        int hh = 0, tt = -1;
        q[++ tt] = root;
        int sz = 1, next_ze = 0, val = 0;
        while (hh <= tt) {
            val = q[hh] -> val;
            while (sz --) {
                TreeNode* p = q[hh ++];
                if (p -> left) {
                    q[++ tt] = p -> left;
                    next_ze ++;
                }
                if (p -> right) {
                    q[++ tt] = p -> right;
                    next_ze ++;
                }
            }
            sz = next_ze;
            next_ze = 0;
        }
        return val;
    }
};



/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int findBottomLeftValue(TreeNode* root) {
        TreeNode* q[10010];
        int hh = 0, tt = -1;
        q[++ tt] = root;
        int sz = 1, next_ze = 0, val = 0;
        while (hh <= tt) {
            val = q[hh] -> val;
            while (sz --) {
                TreeNode* p = q[hh ++];
                if (p -> left) {
                    q[++ tt] = p -> left;
                    next_ze ++;
                }
                if (p -> right) {
                    q[++ tt] = p -> right;
                    next_ze ++;
                }
            }
            sz = next_ze;
            next_ze = 0;
        }
        return val;
    }
};



class Solution {
public:
    int lastStoneWeight(vector<int>& stones) {
        priority_queue<int> q;
        for (int s: stones) {
            q.push(s);
        }

        while (q.size() > 1) {
            int a = q.top();
            q.pop();
            int b = q.top();
            q.pop();
            if (a > b) {
                q.push(a - b);
            }
        }
        return q.empty() ? 0 : q.top();
    }
};



/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int dfs(TreeNode* root, bool st) {
        if (root -> left && root -> right) return dfs(root -> left, true) + dfs(root -> right, false);
        if (root -> left) return dfs(root -> left, true);
        if (root -> right) return dfs(root -> right, false);
        return st ? root -> val : 0;
    }
    int sumOfLeftLeaves(TreeNode* root) {
        return dfs(root, false);
    }
};



class Solution {
public:
    string addBinary(string a, string b) {
        string ans;
        reverse(a.begin(), a.end());
        reverse(b.begin(), b.end());

        int n = max(a.size(), b.size()), carry = 0;
        for (size_t i = 0; i < n; ++i) {
            carry += i < a.size() ? (a.at(i) == '1') : 0;
            carry += i < b.size() ? (b.at(i) == '1') : 0;
            ans.push_back((carry % 2) ? '1' : '0');
            carry /= 2;
        }

        if (carry) {
            ans.push_back('1');
        }
        reverse(ans.begin(), ans.end());

        return ans;
    }
};




class Solution {
public:
    int integerBreak(int n) {
        if (n == 2) return 1;
        if (n == 3) return 2;
        int ans = 1;
        while (n > 4) {
            n -= 3;
            ans *= 3;
        }
        ans *= n;
        return ans;
    }
};





class Solution {
public:
    string compressString(string S) {
        if (S.size() == 0) return S;
        string ans;
        for (int i = 0; i < S.size(); ) {
            ans += S[i];
            int num = 1;
            i ++;
            while (S[i] == S[i - 1]) {
                i ++;
                num ++;
            }
            ans += to_string(num);
            // cout << ans << endl;
        }
        // cout << ans;
        return ans.size() < S.size() ? ans : S;
    }
};




class Solution {
public:
    bool isToeplitzMatrix(vector<vector<int>>& matrix) {
        for (int i = 1; i < matrix.size(); i ++) {
            for (int j = 1; j < matrix[0].size(); j ++) {
                if (matrix[i][j] != matrix[i - 1][j - 1]) return false;
            }
        }
        return true;
    }
};
